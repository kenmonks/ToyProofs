// Generated by CoffeeScript 1.12.7

/*
     The Stars Game
 */
var ChangeDifficulty, ChangeView, Increment, Level, MoveLabel, NewGame, ReasonLabel, Undo, currentStars, doc, formatDoc, formatRow, gameWon, goal, ithLetter, levelnum, levels, makeGoal, makeUI, movelist, randFrom, randInt, seed, showHelp, stars, toyProofsStart, viewmode,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

randInt = function(m, n) {
  return m + Math.floor(Math.random() * (n - m + 1));
};

randFrom = function(L) {
  return L[randInt(0, L.length - 1)];
};

ithLetter = function(i) {
  return String.fromCharCode(64 + i);
};

doc = [1];

seed = 1;

goal = 1;

movelist = [[1]];

viewmode = 'stars';

levelnum = 0;

levels = [
  {
    seeds: [4, 5, 6, 7, 8, 9],
    moves: [[1, -1]],
    desc: 'novice'
  }, {
    seeds: [6, 7, 8, 9, 10],
    moves: [[2, -2, 3, -3]],
    desc: 'beginner'
  }, {
    seeds: [1, 2, 3, 4, 5, 6],
    moves: [[2, 4, 6], [-1]],
    desc: 'trimming the excess'
  }, {
    seeds: [1, 2, 3, 4, 5, 6],
    moves: [[4, 6], [3, 5, 7]],
    desc: 'more interesting'
  }, {
    seeds: [1, 2, 3, 4, 5, 6],
    moves: [[3, 5, 7], [-2, -4, -6]],
    desc: 'even better'
  }, {
    seeds: [1, 2, 3, 4, 5, 6],
    moves: [[3, 5, 7], [-4, -6], [-9, 9, -11, 11]],
    desc: 'fun'
  }
];

Level = levels[levelnum];

currentStars = function() {
  return doc[doc.length - 1];
};

gameWon = function() {
  return doc.length && (currentStars() === goal);
};

ChangeDifficulty = function() {
  levelnum = modulo(levelnum + 1, levels.length);
  Level = levels[levelnum];
  return NewGame();
};

Increment = function(n) {
  var newnum;
  newnum = currentStars() + n;
  if (0 < newnum) {
    doc.push(newnum);
    return formatDoc();
  } else if (newnum === 0) {
    return formatDoc('Removing all of the stars is not allowed.');
  } else {
    return formatDoc('There are not enough stars to remove ' + -n + ' stars');
  }
};

Undo = function() {
  if (doc.length > 1) {
    doc.pop();
  }
  return formatDoc();
};

makeGoal = function() {
  var j, len, m, newGoal;
  goal = seed;
  for (j = 0, len = movelist.length; j < len; j++) {
    m = movelist[j];
    goal = goal + randInt(0, 5) * m;
  }
  if (goal <= 0) {
    newGoal = randInt(1, 5);
    seed = seed + newGoal - goal;
    return goal = newGoal;
  }
};

NewGame = function() {
  var i, j, ref;
  movelist = [];
  for (i = j = 0, ref = Level.moves.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
    movelist.push(randFrom(Level.moves[i]));
  }
  seed = randFrom(Level.seeds);
  makeGoal();
  doc = [seed];
  while (gameWon()) {
    seed = randFrom(Level.seeds);
    makeGoal();
    doc = [seed];
  }
  makeUI();
  return formatDoc();
};

toyProofsStart = function() {
  return NewGame();
};

stars = function(n) {
  if (viewmode === 'stars') {
    return "<span id='mystar'></span>".repeat(n);
  } else {
    return n.toString() + ' stars';
  }
};

ChangeView = function() {
  if (viewmode === 'stars') {
    viewmode = 'numbers';
  } else {
    viewmode = 'stars';
  }
  return formatDoc();
};

MoveLabel = function(n) {
  if (n === 1) {
    return 'Add 1 star';
  } else if (n === -1) {
    return 'Remove 1 star';
  } else if (0 < n) {
    return 'Add ' + n + ' stars';
  } else {
    return 'Remove ' + -n + ' stars';
  }
};

ReasonLabel = function(i) {
  var n;
  n = doc[i] - doc[i - 1];
  if (n === 1) {
    return 'Added 1 star';
  } else if (n === -1) {
    return 'Removed 1 star';
  } else if (0 < n) {
    return 'Added ' + n + ' stars';
  } else {
    return 'Removed ' + -n + ' stars';
  }
};

formatRow = function(label, content, bgcolor1, bgcolor2) {
  return "<tr>\n  <td align=\"left\" width=\"150\" bgcolor=\"" + bgcolor1 + "\">" + label + "</td>\n  <td align=\"left\" width=\"240\" bgcolor=\"" + bgcolor2 + "\">" + content + "</td>\n</tr>\n";
};

formatDoc = function(msg) {
  var i, j, ref, result;
  if (msg == null) {
    msg = 'OK';
  }
  result = "<tr>\n  <td colspan=2 align=\"center\"><font size=5>Stars!</font><br/>\n  (<i>Difficulty Level: <b> " + Level.desc + "</b></i>)</td>\n</tr>\n" + (formatRow('Goal:<br><i>Make this many stars</i>:', stars(goal), 'ffaaaa', 'aaaaff')) + "\n" + (formatRow('Starting with this many:', stars(seed), '#ccffcc', '#ffffaa'));
  for (i = j = 1, ref = doc.length - 1; j <= ref; i = j += 1) {
    result = result + formatRow(ReasonLabel(i), stars(doc[i]), '#ffffff', '#ffffaa');
  }
  if (gameWon()) {
    result = result + "<tr><td colspan=2 align=\"center\" bgcolor=\"#aaaaff\">\n<b>YOU WIN!</b></td></tr>\n\n<tr><td colspan=2 align=\"center\" bgcolor=\"#ffffff\">\nPress N for a new game.</td></tr>\n";
  }
  if (msg !== 'OK') {
    result = result + ("<tr>\n <td colspan=2 align=\"center\" bgcolor=\"#ffaaff\">\n  <b>" + msg + "</b>\n </td>\n</tr>\n");
  }
  return "<table width=425 align=\"center\" border=0 cellpadding=5 cellspacing=5 bgcolor=\"#dddddd\">\n\n   " + result + "\n</table>\n";
};

makeUI = function() {
  var i, j, ref;
  clearShortcuts();
  addShortcutGroup('<b>Moves</b>');
  for (i = j = 0, ref = movelist.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
    addShortcut(ithLetter(i + 1), MoveLabel(movelist[i]), "Increment(movelist[" + i + "])", 'Change the last number of stars, if possible.\n' + 'The result must be positive.', 'movebutton');
  }
  addShortcutGroup('<hr><br><b>Options</b>');
  addShortcut('N', "New Game", "NewGame()", 'Start a new game with a different goal at the current Level.');
  addShortcut('D', "Change Difficulty", "ChangeDifficulty()", "Change the Difficulty Level and start a new game.");
  addShortcut('V', "Change View", "ChangeView()", "Change the view between stars and numbers.");
  addShortcut('U', "Undo one step", "Undo()", 'Undo your last move in the game.\nUse this repeatedly' + ' to go back several moves.');
  addShortcutGroup(hrule);
  return addShortcut('H', 'Help', 'showHelp()', 'Display the instructions for this game.');
};

showHelp = function() {
  openURL('Stars.html');
  return formatDoc();
};
